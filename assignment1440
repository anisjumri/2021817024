#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <sys/wait.h>

#define MAX_CHILD 10
#define BUFFER_SIZE 1024

void handle_interrupt (int sig);

int main() {
    pid_t pid [MAX_CHILD];
    int num_child = 0;
    int pipes[MAX_CHILD] [2];
    int i,j;
    char message[BUFFER_SIZE];
    
    signal(SIGINT, handle_interrupt);
    for (i = 0; i < MAX_CHILD; i++) {
        if (pipe (pipes[i]) == -1) {
            perror("pipe");
            exit(1);
        }
        
    }
    
    for (i = 0; i < MAX_CHILD; i++) {
        pid_t child_pid = fork();
        if (child_pid == -1) {
            perror("fork");
            exit(1);
        }
        else if (child_pid == 0){
            close(pipes [i] [1]);
            while (1) {
                int bytes_read = read(pipes[i] [0], message, BUFFER_SIZE);
                if (bytes_read == -1) {
                    perror("read");
                    exit(1);
                }
                
                else if (bytes_read == 0) {
                    
                    break;
                    
                }
                
                else {
                    printf("Child process %d receieved message : %s\n", i+1, message);
                    
                }
                
            }
            
            close(pipes[i][0]);
            exit (0);
        }
            else {
                pid[i] = child_pid;
                num_child++;
                close(pipes[i][0]);
            }
            
           
    }
    
    while (1) {
        printf("Enter message to send to child process: ");
        if (fgets(message, BUFFER_SIZE, stdin) == NULL) 
        {
            break;
        }
        
        message [strlen(message)-1] = '\0';
        
        for (j = 0; j < num_child; j++) {
            int bytes_written = write(pipes[j][1], message, strlen(message)+1);
            if (bytes_written == -1 ) {
                perror("write");
                exit(1);
            }
        }
    }
    
    for (i = 0; i < num_child; i++) {
        
        int status;
        kill(pid[i], SIGTERM);
        waitpid(pid[i], &status, 0);
        close(pipes[i][1]);
    }
    
    return 0;
    
    void handle_interrupt (int sig) {
        printf("\nGot interrupt signal. Terminate program.\n");
        exit(0);
    }
}


